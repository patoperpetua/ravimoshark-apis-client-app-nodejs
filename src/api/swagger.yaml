openapi: 3.0.0
info:
  version: 1.0.0
  title: Ravimoshark Client API
  termsOfService: 'https://ravimoshark.com/terms/'
  contact:
    email: dev@ravimoshark.com
    url: 'http://ravimoshark.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    This is an API to interact with Ravimoshark client database.
    # Introduction
    This API allow to create, modify and delete addresses and clients.
    # User Authentication
    This API does not contain any kind of user validation but It request to have a valid authentication user to interact with it. For more information about user Authentication, please refer to [Ravimoshark User Authentication](https://ravimoshark.com/back/apis/auth/latest).
externalDocs:
  description: Find out how to interact with Ravimoshark's APIs.
  url: 'https://ravimoshark.com/back/apis/auth/latest'
tags:
  - name: Addresses
    description: Operations about addresses.
  - name: Clients
    description: Operations about clients.
servers:
  - url: 'http://localhost:8002'
  - url: 'http://localhost:8000'
  - url: 'https://ravimoshark.com/back/apis/client/v1'
  - url: 'https://ravimoshark.com/back/apis/client/latest'
paths:
  /addresses:
    get:
      tags:
        - Addresses
      summary: Get all addresses.
      description: Get all addresses.
      operationId: getAddresses
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Deleted'
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/RefClientQuery'
      responses:
        '200':
          description: Request OK.
          headers:
            - $ref: '#/components/headers/Limit'
            - $ref: '#/components/headers/Remaining'
            - $ref: '#/components/headers/Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Addresses'
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Addresses
    post:
      tags:
        - Addresses
      summary: Add one address.
      description: Add one address.
      operationId: addAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Addresses'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Addresses
    put:
      tags:
        - Addresses
      summary: Edit one address.
      description: Edit one address.
      operationId: editAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Addresses'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Addresses
  '/addresses/{id}':
    get:
      tags:
        - Addresses
      summary: Get one address.
      description: Get one address.
      operationId: getAddressById
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Deleted'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Addresses
    delete:
      tags:
        - Addresses
      summary: Delete one address.
      description: Delete one address.
      operationId: deleteAddress
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdInteger'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Addresses
  /clients:
    get:
      tags:
        - Clients
      summary: Get all clients.
      description: Get all clients.
      operationId: getClients
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Deleted'
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/RefClientQuery'
      responses:
        '200':
          description: Request OK.
          headers:
            - $ref: '#/components/headers/Limit'
            - $ref: '#/components/headers/Remaining'
            - $ref: '#/components/headers/Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Clients'
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Clients
    post:
      tags:
        - Clients
      summary: Add one client.
      description: Add one client.
      operationId: addClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clients'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Clients
    put:
      tags:
        - Clients
      summary: Edit one client.
      description: Edit one client.
      operationId: editClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clients'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Clients
  '/clients/{refClient}':
    get:
      tags:
        - Clients
      summary: Get one client.
      description: Get one client.
      operationId: getClientById
      parameters:
        - $ref: '#/components/parameters/RefClientQuery'
        - $ref: '#/components/parameters/Deleted'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Clients
    delete:
      tags:
        - Clients
      summary: Delete one client.
      description: Delete one client.
      operationId: deleteClient
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdInteger'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Clients
components:
  schemas:
    Addresses:
      description: Address information.
      type: object
      properties:
        id:
          type: integer
          format: int64
        refClient:
          type: string
        # client:
        #   $ref: '#/components/schemas/Clients'
        addressType:
          type: string
        delivery:
          type: string
        city:
          type: string
        complement:
          type: string
        country:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        name:
          type: string
        postalCode:
          type: string
        streetName:
          type: string
        streetNumber:
          type: string
        telephone:
          type: string
    Clients:
      description: Client information.
      type: object
      properties:
        refClient:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Addresses'
        addressesId:
          type: array
          items:
            type: integer
            format: int64
        companyName:
          type: string
        email:
          type: string
        frequency:
          type: string
        group:
          type: string
        name:
          type: string
        nickname:
          type: string
        sector:
          type: string
        state:
          type: string
        status:
          type: string
        stateGroup:
          type: string
        score:
          type: string
        typeClient:
          type: string
        vat:
          type: string
    CustomError:
      type: object
      required:
        - message
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: string
    Deleted:
      type: string
      default: ACTIVE
      enum:
        - ACTIVE
        - DELETED
        - ALL
    IdInteger:
      description: Object's Id.
      type: object
      properties:
        id:
          type: integer
          format: int64
    Metadata:
      type: object
      properties:
        first:
          type: integer
          format: int64
        prev:
          type: integer
          format: int64
        self:
          type: integer
          format: int64
        next:
          type: integer
          format: int64
        last:
          type: integer
          format: int64
  responses:
    '204':
      description: Response is empty.
      headers:
        - $ref: '#/components/headers/Limit'
        - $ref: '#/components/headers/Remaining'
        - $ref: '#/components/headers/Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '400':
      description: Some parameters are missing or badly entered.
      headers:
        - $ref: '#/components/headers/Limit'
        - $ref: '#/components/headers/Remaining'
        - $ref: '#/components/headers/Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '401':
      description: Unauthorized
      headers:
        - $ref: '#/components/headers/Limit'
        - $ref: '#/components/headers/Remaining'
        - $ref: '#/components/headers/Reset'
      content:
        application/json:
          schema:
            type: string
    '404':
      description: Entity not found.
      headers:
        - $ref: '#/components/headers/Limit'
        - $ref: '#/components/headers/Remaining'
        - $ref: '#/components/headers/Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '405':
      description: Illegal input for operation.
      headers:
        - $ref: '#/components/headers/Limit'
        - $ref: '#/components/headers/Remaining'
        - $ref: '#/components/headers/Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
  parameters:
    Deleted:
      name: deleted
      in: query
      description: 'Get all, deleted, not deleted data. Default not deleted.'
      required: false
      schema:
        $ref: '#/components/schemas/Deleted'
        default: ACTIVE
    Filter:
      name: filterBy
      description: filter data.
      in: query
      required: false
      schema:
        type: string
    Id:
      name: id
      description: id to delete or search
      in: path
      required: true
      schema:
        type: integer
        format: int64
    Limit:
      name: limit
      description: max records to return
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 10
    Metadata:
      name: metadata
      description: If metadata is needed (for pagination controls)
      in: query
      required: false
      schema:
        type: boolean
        default: false
    OrderBy:
      name: orderBy
      description: order by property.
      in: query
      required: false
      schema:
        type: string
    RefClientQuery:
      name: refClient
      description: Data from a desired contract
      in: query
      required: false
      schema:
        type: string
    Skip:
      name: skip
      description: number of item to skip
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 0
  headers:
    Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
        format: int64
    Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
        format: int64
    Reset:
      description: The number of seconds left in the current period
      schema:
        type: integer
        format: int64
