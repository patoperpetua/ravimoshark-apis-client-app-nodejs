openapi: 3.0.0
info:
  title: Ravimoshark Client API
  description: |
    This is an API to interact with Ravimoshark client database.
    # Introduction
    This API allow to create, modify and delete addresses and clients.
    # User Authentication
    This API does not contain any kind of user validation but It request to have a valid authentication user to interact with it. For more information about user Authentication, please refer to [Ravimoshark User Authentication](https://ravimoshark.com/back/apis/auth/latest).
  termsOfService: https://ravimoshark.com/terms/
  contact:
    url: http://ravimoshark.com/contact
    email: dev@ravimoshark.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out how to interact with Ravimoshark's APIs.
  url: https://ravimoshark.com/back/apis/auth/latest
servers:
  - url: http://localhost:8000
  - url: http://localhost:8002
  - url: https://ravimoshark.com/back/apis/client/v1
  - url: https://ravimoshark.com/back/apis/client/latest
tags:
- name: Addresses
  description: Operations about addresses.
- name: Clients
  description: Operations about clients.
paths:
  /addresses:
    get:
      tags:
      - Addresses
      summary: Get all addresses.
      description: Get all addresses.
      operationId: getAddresses
      parameters:
      - name: skip
        in: query
        description: number of item to skip
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: max records to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        description: order by property.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filterBy
        in: query
        description: filter data.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Get all, deleted, not deleted data. Default not deleted.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Deleted'
      - name: metadata
        in: query
        description: If metadata is needed (for pagination controls)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: refClient
        in: query
        description: Data from a desired contract
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        204:
          description: Response is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Addresses
    put:
      tags:
      - Addresses
      summary: Edit one address.
      description: Edit one address.
      operationId: editAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Addresses'
        required: true
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Addresses
    post:
      tags:
      - Addresses
      summary: Add one address.
      description: Add one address.
      operationId: addAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Addresses'
        required: true
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Addresses
  /addresses/{id}:
    get:
      tags:
      - Addresses
      summary: Get one address.
      description: Get one address.
      operationId: getAddressById
      parameters:
      - name: id
        in: path
        description: id to delete or search
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: deleted
        in: query
        description: Get all, deleted, not deleted data. Default not deleted.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Deleted'
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Addresses
    delete:
      tags:
      - Addresses
      summary: Delete one address.
      description: Delete one address.
      operationId: deleteAddress
      parameters:
      - name: id
        in: path
        description: id to delete or search
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdInteger'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Addresses
  /clients:
    get:
      tags:
      - Clients
      summary: Get all clients.
      description: Get all clients.
      operationId: getClients
      parameters:
      - name: skip
        in: query
        description: number of item to skip
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: max records to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        description: order by property.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filterBy
        in: query
        description: filter data.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Get all, deleted, not deleted data. Default not deleted.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Deleted'
      - name: metadata
        in: query
        description: If metadata is needed (for pagination controls)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: refClient
        in: query
        description: Data from a desired contract
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        204:
          description: Response is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Clients
    put:
      tags:
      - Clients
      summary: Edit one client.
      description: Edit one client.
      operationId: editClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clients'
        required: true
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Clients
    post:
      tags:
      - Clients
      summary: Add one client.
      description: Add one client.
      operationId: addClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clients'
        required: true
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Clients
  /clients/{id}:
    get:
      tags:
      - Clients
      summary: Get one client.
      description: Get one client.
      operationId: getClientById
      parameters:
      - name: id
        in: path
        description: id to delete or search
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: deleted
        in: query
        description: Get all, deleted, not deleted data. Default not deleted.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Deleted'
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Clients
    delete:
      tags:
      - Clients
      summary: Delete one client.
      description: Delete one client.
      operationId: deleteClient
      parameters:
      - name: id
        in: path
        description: id to delete or search
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdInteger'
        400:
          description: Some parameters are missing or badly entered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        405:
          description: Illegal input for operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
      x-swagger-router-controller: Clients
components:
  schemas:
    Addresses:
      type: object
      properties:
        id:
          type: integer
          format: int64
        refClient:
          type: string
        # client:
        #   $ref: '#/components/schemas/Clients'
        addressType:
          type: string
        delivery:
          type: string
        city:
          type: string
        complement:
          type: string
        country:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        name:
          type: string
        postalCode:
          type: string
        streetName:
          type: string
        streetNumber:
          type: integer
          format: int64
        telephone:
          type: string
      description: Address information.
      example:
        delivery: delivery
        country: country
        city: city
        streetNumber: 2
        addressType: addressType
        latitude: 9.301444
        postalCode: postalCode
        telephone: telephone
        streetName: streetName
        name: name
        client:
          addresses:
          - null
          - null
          companyName: companyName
          vat: vat
          addressesId:
          - 7
          - 7
          frequency: frequency
          score: score
          stateGroup: stateGroup
          typeClient: typeClient
          name: name
          nickname: nickname
          state: state
          refClient: refClient
          sector: sector
          email: email
          group: group
        id: 2
        complement: complement
        refClient: refClient
        longitude: 3.6160767
    Clients:
      type: object
      properties:
        refClient:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Addresses'
        addressesId:
          type: array
          items:
            type: integer
            format: int64
        companyName:
          type: string
        email:
          type: string
        frequency:
          type: string
        group:
          type: string
        name:
          type: string
        nickname:
          type: string
        sector:
          type: string
        state:
          type: string
        stateGroup:
          type: string
        score:
          type: string
        typeClient:
          type: string
        vat:
          type: string
      description: Client information.
      example:
        addresses:
        - null
        - null
        companyName: companyName
        vat: vat
        addressesId:
        - 7
        - 7
        frequency: frequency
        score: score
        stateGroup: stateGroup
        typeClient: typeClient
        name: name
        nickname: nickname
        state: state
        refClient: refClient
        sector: sector
        email: email
        group: group
    CustomError:
      required:
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: string
    Deleted:
      type: string
      enum:
      - ACTIVE
      - DELETED
      - ALL
      default: ACTIVE
    IdInteger:
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: Object's Id.
      example:
        id: 0
    Metadata:
      type: object
      properties:
        first:
          type: integer
          format: int64
        prev:
          type: integer
          format: int64
        self:
          type: integer
          format: int64
        next:
          type: integer
          format: int64
        last:
          type: integer
          format: int64
      example:
        next: 5
        last: 5
        prev: 6
        self: 1
        first: 0
    inline_response_200:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Addresses'
      example:
        metadata:
          next: 5
          last: 5
          prev: 6
          self: 1
          first: 0
        items:
        - delivery: delivery
          country: country
          city: city
          streetNumber: 2
          addressType: addressType
          latitude: 9.301444
          postalCode: postalCode
          telephone: telephone
          streetName: streetName
          name: name
          client:
            addresses:
            - null
            - null
            companyName: companyName
            vat: vat
            addressesId:
            - 7
            - 7
            frequency: frequency
            score: score
            stateGroup: stateGroup
            typeClient: typeClient
            name: name
            nickname: nickname
            state: state
            refClient: refClient
            sector: sector
            email: email
            group: group
          id: 2
          complement: complement
          refClient: refClient
          longitude: 3.6160767
        - delivery: delivery
          country: country
          city: city
          streetNumber: 2
          addressType: addressType
          latitude: 9.301444
          postalCode: postalCode
          telephone: telephone
          streetName: streetName
          name: name
          client:
            addresses:
            - null
            - null
            companyName: companyName
            vat: vat
            addressesId:
            - 7
            - 7
            frequency: frequency
            score: score
            stateGroup: stateGroup
            typeClient: typeClient
            name: name
            nickname: nickname
            state: state
            refClient: refClient
            sector: sector
            email: email
            group: group
          id: 2
          complement: complement
          refClient: refClient
          longitude: 3.6160767
    inline_response_200_1:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Clients'
      example:
        metadata:
          next: 5
          last: 5
          prev: 6
          self: 1
          first: 0
        items:
        - addresses:
          - null
          - null
          companyName: companyName
          vat: vat
          addressesId:
          - 7
          - 7
          frequency: frequency
          score: score
          stateGroup: stateGroup
          typeClient: typeClient
          name: name
          nickname: nickname
          state: state
          refClient: refClient
          sector: sector
          email: email
          group: group
        - addresses:
          - null
          - null
          companyName: companyName
          vat: vat
          addressesId:
          - 7
          - 7
          frequency: frequency
          score: score
          stateGroup: stateGroup
          typeClient: typeClient
          name: name
          nickname: nickname
          state: state
          refClient: refClient
          sector: sector
          email: email
          group: group
  responses:
    204:
      description: Response is empty.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    400:
      description: Some parameters are missing or badly entered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
            x-content-type: application/json
    404:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    405:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
  parameters:
    Deleted:
      name: deleted
      in: query
      description: Get all, deleted, not deleted data. Default not deleted.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/Deleted'
    Filter:
      name: filterBy
      in: query
      description: filter data.
      required: false
      style: form
      explode: true
      schema:
        type: string
    Id:
      name: id
      in: path
      description: id to delete or search
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
    Limit:
      name: limit
      in: query
      description: max records to return
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 10
    Metadata:
      name: metadata
      in: query
      description: If metadata is needed (for pagination controls)
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        default: false
    OrderBy:
      name: orderBy
      in: query
      description: order by property.
      required: false
      style: form
      explode: true
      schema:
        type: string
    RefClientQuery:
      name: refClient
      in: query
      description: Data from a desired contract
      required: false
      style: form
      explode: true
      schema:
        type: string
    Skip:
      name: skip
      in: query
      description: number of item to skip
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 0
  headers:
    Limit:
      description: The number of allowed requests in the current period
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
    Remaining:
      description: The number of remaining requests in the current period
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
    Reset:
      description: The number of seconds left in the current period
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
